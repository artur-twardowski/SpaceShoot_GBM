// MIT License
// 
// Copyright (c) 2023 Artur Twardowski
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//     SOFTWARE.

#include "Tileset.h"
#include "GameContext.h"

namespace spaceshoot { namespace tileset {

const uint16_t tilesetPalette[16] = {
    0x0000, 0x7061, 0x10f7, 0x5a60, 0x5aeb, 0x0480, 0xfacb, 0xe3a1, 
    0x9492, 0x0700, 0x9fdc, 0xff6f, 0xffff, 0x39e7, 0x8bac, 0x4adf
};
const uint8_t tilesetData[] = {
    160, 5, 1, 0, 0, 0, (uint8_t)ColorMode::index, 0,
    0x00, 0x00, 0xb3, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xab, 0xab, 0xca, 0xca, 0x04, 0x80, 0x00, 0x40, 0x00, 0x00, 0x13, 0x13, 
    0xb5, 0xb5, 0x40, 0x04, 0x88, 0x00, 0x88, 0xb7, 0x88, 0x00, 0x88, 0xb7, 0x00, 0x00, 0x00, 0x70, 
    0x00, 0x33, 0x40, 0x04, 0x88, 0x00, 0x00, 0x00, 0x0d, 0x4d, 0xdd, 0xd0, 0x04, 0x80, 0x0d, 0xd0, 
    0x03, 0xd0, 0x0d, 0x48, 0xe4, 0x4e, 0xb3, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3b, 0x3b, 0x11, 0x16, 0x11, 0x61, 0x16, 0x11, 0x61, 0x11, 0x55, 0x59, 0x55, 0x95, 
    0x59, 0x55, 0x95, 0x55, 0xba, 0xba, 0xac, 0xac, 0x47, 0xa8, 0x40, 0x30, 0x00, 0x40, 0x31, 0x31, 
    0x5b, 0x5b, 0x80, 0x08, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
    0x37, 0xbb, 0x80, 0x77, 0x70, 0x00, 0x88, 0x84, 0x0d, 0x4d, 0xd8, 0x80, 0x08, 0x40, 0xd8, 0x8d, 
    0x08, 0x30, 0x48, 0x00, 0x3e, 0xe3, 0x4a, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xb3, 0xb3, 0x77, 0x16, 0x71, 0x67, 0x16, 0x77, 0x67, 0x71, 0x55, 0x59, 0x55, 0x95, 
    0x59, 0x55, 0x95, 0x55, 0xab, 0xab, 0xca, 0xca, 0x7a, 0x7a, 0x03, 0x43, 0x04, 0x00, 0x17, 0x16, 
    0x55, 0x55, 0x68, 0x88, 0x84, 0x48, 0x84, 0xc8, 0x84, 0xc8, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x33, 0x68, 0xbb, 0xb7, 0x78, 0x88, 0x88, 0x0d, 0x4d, 0xd8, 0xd8, 0x04, 0x80, 0xde, 0xed, 
    0x0e, 0x80, 0x00, 0x80, 0x43, 0x34, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3b, 0x3b, 0x1b, 0x66, 0xb6, 0x61, 0x66, 0x1b, 0x61, 0xb6, 0x5b, 0xb9, 0xbb, 0x95, 
    0xb9, 0x5b, 0x95, 0xbb, 0xba, 0xba, 0xac, 0xac, 0x47, 0xa8, 0x44, 0x04, 0x00, 0x00, 0x3b, 0x31, 
    0x5b, 0x5b, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
    0x37, 0xbb, 0x80, 0x77, 0x70, 0x00, 0x04, 0x48, 0x0d, 0x4d, 0x00, 0x8d, 0x08, 0x40, 0xd4, 0x4d, 
    0x03, 0xe0, 0x80, 0x00, 0x4e, 0x34, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xb3, 0xb3, 0x11, 0x16, 0x11, 0x61, 0x16, 0x11, 0x61, 0x11, 0x55, 0x59, 0x55, 0x95, 
    0x59, 0x55, 0x95, 0x55, 0xab, 0xab, 0xca, 0xca, 0x0a, 0x80, 0x03, 0x00, 0x04, 0x00, 0x13, 0x13, 
    0xb5, 0xb5, 0x40, 0x04, 0x88, 0x00, 0x88, 0x00, 0x88, 0xb7, 0x88, 0xb7, 0x00, 0x70, 0x00, 0x00, 
    0x00, 0x33, 0x40, 0x04, 0x88, 0x00, 0x00, 0x48, 0x0d, 0x4d, 0x00, 0x00, 0x88, 0x88, 0x0d, 0xd0, 
    0x0d, 0x30, 0x08, 0xd8, 0x4e, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const AnimationSequence animSequences[] = {
  /* None */ {ElementID::None, 0},
  /* Stone */ {ElementID::Stone, 0},
  /* Bomb1 */ {ElementID::Bomb2, 2},
  /* Bomb2 */ {ElementID::Bomb3, 2},
  /* Bomb3 */ {ElementID::Bomb4, 2},
  /* Bomb4 */ {ElementID::Bomb1, 2},
  /* Bonus1 */ {ElementID::Bonus2, 3},
  /* Bonus2 */ {ElementID::Bonus3, 3},
  /* Bonus3 */ {ElementID::Bonus4, 3},
  /* Bonus4 */ {ElementID::Bonus1, 3},
  /* Destroyed1 */ {ElementID::Destroyed2, 1},
  /* Destroyed2 */ {ElementID::Destroyed3, 1},
  /* Destroyed3 */ {ElementID::Destroyed4, 1},
  /* Destroyed4 */ {ElementID::Destroyed5, 1},
  /* Destroyed5 */ {ElementID::None, 1},
  /* BombStoned */ {ElementID::Stone, 4},
  /* BonusStoned */ {ElementID::Stone, 4},
  /* ShipTail */   {ElementID::ShipTail, 0},
  /* ShipFrontNormal */   {ElementID::ShipFrontNormal, 0},
  /* ShipFiringLeft */   {ElementID::ShipFrontNormal, 1},
  /* ShipFiringRight */   {ElementID::ShipFrontNormal, 2},
  /* ShipFiringBoth */   {ElementID::ShipFrontNormal, 2},
  /* ShipFiringGlowLeft */   {ElementID::None, 2},
  /* ShipFiringGlowRight */   {ElementID::None, 2},
  /* ShipTailFire */   {ElementID::ShipTailFire, 0},
  /* ShipTailExploding */   {ElementID::Destroyed1, 1},
  /* ShipFrontExploding */   {ElementID::Destroyed1, 1},
  /* Debris1 */ {ElementID::Debris1, 0},
  /* Debris2 */ {ElementID::Debris2, 0},
  /* Debris3 */ {ElementID::Debris3, 0},
  /* Debris4 */ {ElementID::Debris4, 0},
  /* Debris5 */ {ElementID::Debris5, 0},
  /* Debris6 */ {ElementID::Debris6, 0},
  /* Debris7 */ {ElementID::Debris7, 0},
  /* Debris8 */ {ElementID::Debris8, 0},
};

static_assert(sizeof(animSequences) / sizeof(animSequences[0]) == static_cast<size_t>(ElementID::Count));
static_assert(static_cast<size_t>(ElementID::Count) <= BLOCK_MASK);

void draw(Image& tileset, uint16_t x, uint16_t y, ElementID elementID) {
    gb.display.drawImage(x, y,
            tileset,
            static_cast<uint8_t>(elementID) * BLOCK_WIDTH + 2, 0,
            BLOCK_WIDTH, BLOCK_HEIGHT);
}

void load(Image& tileset) {
    tileset.init(tilesetData);
}

void applyPalette(uint8_t paletteSlot, uint8_t firstRow, uint8_t lastRow) {
    gb.tft.colorCells.palettes[paletteSlot] = (Color*)tilesetPalette;
    for (uint8_t ix = firstRow; ix <= lastRow; ix++) {
        gb.tft.colorCells.paletteToLine[ix] = paletteSlot;
    }
}


}}
